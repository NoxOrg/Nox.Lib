using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Newtonsoft.Json.Linq;
using YamlDotNet.Serialization;

namespace Nox.Generator;

[Generator]
public class NoxDynamicGenerator : ISourceGenerator
{
    public void Execute(GeneratorExecutionContext context)
    {

#if DEBUG
        if (!Debugger.IsAttached)
        {
            Debugger.Launch();
        }
#endif
        var assemblyName = context.Compilation.AssemblyName;
        var mainSyntaxTree = context.Compilation.SyntaxTrees
            .FirstOrDefault(x => x.FilePath.EndsWith("Program.cs"));
        
        if (mainSyntaxTree == null) return;

        var programPath = Path.GetDirectoryName(mainSyntaxTree.FilePath);
        var designRoot = programPath;
        
        var json = Path.Combine(programPath!, "appsettings.json");
        if (File.Exists(json))
        {
            var config = JObject.Parse(File.ReadAllText(json));
            designRoot = config["Nox"]?["DefinitionRootPath"]!.ToString();
        }        
        
        var env = GetEnvironment();
        if (!string.IsNullOrEmpty(env))
        {
            var envJson = Path.Combine(programPath, $"appsettings.{env}.json");
            if (File.Exists(envJson))
            {
                var envConfig = JObject.Parse(File.ReadAllText(envJson));
                designRoot = envConfig["Nox"]?["DefinitionRootPath"]!.ToString();
            }
        }
        
        var designRootFullPath = Path.GetFullPath(Path.Combine(programPath, designRoot));

        var deserializer = new DeserializerBuilder().Build();

        var entities = Directory
            .EnumerateFiles(designRootFullPath, "*.entity.nox.yaml", SearchOption.AllDirectories)
            .Select(f => deserializer.Deserialize(new StringReader(File.ReadAllText(f))))
            .ToList();


        foreach (Dictionary<object, object> entity in entities)
        {
            AddEntity(context, assemblyName, entity);
            AddDomainEvent(context, assemblyName, GeneratorEventTypeEnum.Created, entity);
            AddDomainEvent(context, assemblyName, GeneratorEventTypeEnum.Updated, entity);
            AddDomainEvent(context, assemblyName, GeneratorEventTypeEnum.Deleted, entity);
        }
    }

    public void Initialize(GeneratorInitializationContext context)
    {
    }

    private string ClassDataType(string type)
    {
        var propType = type.ToLower() ?? "string";

        return propType switch
        {
            "string" => "string",
            "varchar" => "string",
            "nvarchar" => "string",
            "char" => "string",
            "guid" => "Guid",
            "url" => "string",
            "email" => "string",
            "date" => "DateTime",
            "time" => "DateTime",
            "timespan" => "TimeSpan",
            "datetime" => "DateTimeOffset",
            "bool" => "bool",
            "boolean" => "bool",
            "object" => "object",
            "int" => "int",
            "uint" => "uint",
            "tinyint" => "int",
            "bigint" => "long",
            "money" => "decimal",
            "smallmoney" => "decimal",
            "decimal" => "decimal",
            "real" => "single",
            "float" => "single",
            "bigreal" => "double",
            "bigfloat" => "double",
            _ => "string"
        };

    }

    private void AddEntity(GeneratorExecutionContext context, string assemblyName, Dictionary<object, object> entity)
    {
        var sb = new StringBuilder();

        sb.AppendLine($@"// autogenerated");
        sb.AppendLine($@"using Nox.Core.Interfaces;");
        sb.AppendLine($@"");
        sb.AppendLine($@"namespace Nox;");
        sb.AppendLine($@"");
        sb.AppendLine($@"public class {entity["Name"]} : IDynamicEntity");
        sb.AppendLine($@"{{");

        var attributes = (List<object>)entity["Attributes"];
        foreach (Dictionary<object, object> attr in attributes)
        {
            sb.AppendLine($@"   public {ClassDataType((string)attr["Type"])} {attr["Name"]} {{get; set;}}");
        }

        sb.AppendLine($@"}}");

        var hintName = $"{entity["Name"]}.g.cs";
        var source = SourceText.From(sb.ToString(), Encoding.UTF8);

        context.AddSource(hintName, source);
    }

    private void AddDomainEvent(GeneratorExecutionContext context, string assemblyName, GeneratorEventTypeEnum generatorEventType, Dictionary<object, object> entity)
    {
        var sb = new StringBuilder();

        var eventTypeName = "";
        switch (generatorEventType)
        {
            case GeneratorEventTypeEnum.Created:
                eventTypeName = "Create";
                break;
            case GeneratorEventTypeEnum.Updated:
                eventTypeName = "Update";
                break;
            case GeneratorEventTypeEnum.Deleted:
                eventTypeName = "Delete";
                break;
        }

        var className = $"{entity["Name"]}{eventTypeName}dDomainEvent";

        sb.AppendLine($@"// autogenerated");
        sb.AppendLine($@"using Nox.Messaging.Events;");
        sb.AppendLine($@"");
        sb.AppendLine($@"namespace Nox;");
        sb.AppendLine($@"");
        sb.AppendLine($@"public partial class {className} : Nox{eventTypeName}Event<{entity["Name"]}>");
        sb.AppendLine($@"{{");
        sb.AppendLine($@"}}");

        var hintName = $"{className}.g.cs";
        var source = SourceText.From(sb.ToString(), Encoding.UTF8);

        context.AddSource(hintName, source);
    }
    
    private static string? GetEnvironment()
    {
        var env = Environment.GetEnvironmentVariable("ENVIRONMENT");
        env ??= Environment.GetEnvironmentVariable("DOTNET_ENVIRONMENT");
        env ??= Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT");
        return env;
    }
}