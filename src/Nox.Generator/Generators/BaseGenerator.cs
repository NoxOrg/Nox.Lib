using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System.Collections.Generic;
using System.Text;
using System.Linq;

namespace Nox.Generator.Generators
{
    internal abstract class BaseGenerator
    {
        protected GeneratorExecutionContext Context { get; }

        internal BaseGenerator(GeneratorExecutionContext context)
        {
            Context = context;
        }

        protected void GenerateFile(StringBuilder sb, string className)
        {
            var hintName = $"{className}.g.cs";
            var source = SourceText.From(sb.ToString(), Encoding.UTF8);

            Context.AddSource(hintName, source);
        }

        protected static void AddSimpleProperty(object type, object name, StringBuilder sb)
        {
            AddProperty(ClassDataType((string)type), name, sb);
        }

        protected static void AddProperty(string type, object name, StringBuilder sb, bool initOnly = false)
        {
            sb.AppendLine($@"   public {type} {name} {{ get; {(initOnly ? "init" : "set")}; }}");
            sb.AppendLine($@"");
        }

        protected static void AddConstructor(StringBuilder sb, string className, Dictionary<string, string> parameters)
        {
            sb.AppendLine($@"   public {className}(");
            for (int i = 0; i < parameters.Count; i++)
            {
                var parameter = parameters.ElementAt(i);
                sb.AppendLine($@"      {parameter.Key} {ToLowerFirstChar(parameter.Value)}{(i < parameters.Count - 1 ? "," : "")}");
            }
            sb.AppendLine($@"      )");
            sb.AppendLine($@"   {{");
            foreach (var parameter in parameters)
            {
                sb.AppendLine($@"      {parameter.Value} = {ToLowerFirstChar(parameter.Value)};");
            }
            sb.AppendLine($@"   }}");
            sb.AppendLine($@"");
        }

        protected static string GetParametersString(object entity)
        {
            return string.Join(", ", ((List<object>)entity).Cast<Dictionary<object, object>>()
                .Select(parameter => $"{parameter["type"]} {parameter["name"]}"));
        }

        protected static void AddDbContextProperty(StringBuilder sb)
        {
            AddProperty("NoxDbContext", "DbContext", sb, initOnly: true);
        }

        protected static void AddAttributes(Dictionary<object, object> entity, StringBuilder sb)
        {
            var attributes = (List<object>)entity["attributes"];

            foreach (var attr in attributes.Cast<Dictionary<object, object>>())
            {
                AddSimpleProperty(attr["type"], attr["name"], sb);
            }
        }

        protected static void AddNoxMessangerProperty(StringBuilder sb)
        {
            AddProperty("INoxMessenger", "Messenger", sb, initOnly: true);
        }

        protected static void AddBaseTypeDefinition(
            StringBuilder sb,
            string className,
            string parent,
            string noxNamespace,
            bool isAbstract = false,
            params string[] namespaces)
        {
            sb.AppendLine($@"// autogenerated");
            foreach (var val in namespaces)
            {
                sb.AppendLine($@"using {val};");
            }

            sb.AppendLine($@"");
            sb.AppendLine($@"namespace {noxNamespace};");
            sb.AppendLine($@"");
            sb.AppendLine($@"public {(isAbstract ? "abstract " : string.Empty)}class {className} : {parent}");
            sb.AppendLine($@"{{");
        }

        protected static bool GetBooleanValueOrDefault(Dictionary<object, object> entity, string key)
        {
            entity.TryGetValue(key, out object val);

            var valString = (string)val;

            // cover yes/no and true/false
            return valString != null && (valString.Equals("yes") || !valString.Equals("no") && bool.Parse(valString));
        }

        protected static string ClassDataType(string type)
        {
            var propType = type?.ToLower() ?? "string";

            return propType switch
            {
                "string" => "string",
                "varchar" => "string",
                "nvarchar" => "string",
                "char" => "string",
                "guid" => "Guid",
                "url" => "string",
                "email" => "string",
                "date" => "DateTime",
                "time" => "DateTime",
                "timespan" => "TimeSpan",
                "datetime" => "DateTimeOffset",
                "bool" => "bool",
                "boolean" => "bool",
                "object" => "object",
                "int" => "int",
                "uint" => "uint",
                "tinyint" => "int",
                "bigint" => "long",
                "money" => "decimal",
                "smallmoney" => "decimal",
                "decimal" => "decimal",
                "real" => "single",
                "float" => "single",
                "bigreal" => "double",
                "bigfloat" => "double",
                _ => "string"
            };
        }

        public static string ToLowerFirstChar(string input)
        {
            if (string.IsNullOrEmpty(input))
            {
                return input;
            }

            return char.ToLower(input[0]) + input.Substring(1);
        }
    }
}
